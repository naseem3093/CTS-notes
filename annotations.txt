1. @Override – Indicates that a method in a subclass is overriding a method from its superclass.

2. @Deprecated – Marks a method or class as outdated and warns developers to avoid using it.

3. @Configuration - Enables Java-based configuration instead of XML.

4. @ComponentScan - it is used to automatically discover and register Spring components (beans, services, controllers, etc.) within specified packages.(sb)

5.@Component - in Spring Boot it is used to mark a class as a Spring-managed bean, meaning that Spring automatically detects it and registers it in the application context.

6. @SpringBootApplication - @SpringBootApplication annotation in Spring Boot is a core annotation that simplifies configuration by combining three important annotations 		
		       
7. Dependency Injection Annotations

8. @Service – Specialized annotation for service-layer components.

9. @Repository – Specializes a class as a DAO component that interacts with the database.

10. @Autowired – Injects dependencies automatically within a Spring-managed bean.

11. @Qualifier – Specifies a specific bean to be injected when multiple implementations exist.

12. @RestController annotation in Spring Boot is a specialized controller annotation that simplifies the creation of RESTful web services.

13. @RequestMapping annotation in Spring Boot is used to map HTTP requests to specific controller methods.

14. @Import: This annotation imports other configuration classes.

15. @ImportResources: This annotation loads Spring XML configuration files.

16. @PropertySource: This annotation specifies the location of property files for the application context.

17. @Controller: This annotation marks a class as a Spring MVC controller. It is used with @RequestMapping to handle web requests.

18. @RequestBody: This annotation binds the body of the HTTP request to a Java object.

19. @PathVariable: This annotation extracts values from the URI template.

20. @RequestParam: This annotation extracts query parameters from the URL.

21. @ResponseBody: This annotation indicates that the return value of the method should be used as the response body.

22. @ExceptionHandler: This annotation is used to handle exceptions thrown by request-handling methods.

23. @ResponseStatus: This annotation specifies the HTTP status code for the response.

24. @RestController: This annotation is a combination of @Controller and @ResponseBody, used for RESTful web services.

25. @ModelAttribute: This annotation binds a method parameter or method return value to a named model attribute.

26. @CrossOrigin: This annotation enables cross-origin resource sharing (CORS) for specific handler methods or controller classes.

27. @Entity – Marks a class as a JPA entity, meaning it represents a database table in Hibernate.

28. @Table – Defines the table name and constraints for the entity in the database.

29. @Data – A Lombok annotation that automatically generates getter, setter, toString(), equals(), and hashCode() methods.

30. @NoArgsConstructor – A Lombok annotation that creates a default constructor with no arguments, required by JPA for entity initialization.

31. @Transactional - this annotation in Spring Boot is used to manage database transactions automatically.

32. @GetMapping – Handles GET requests, used to retrieve data from the server.

33. @PostMapping – Handles POST requests, used to create new resources.

34. @PutMapping – Handles PUT requests, used to update existing resources.

35. @DeleteMapping – Handles DELETE requests, used to remove resources from the server.

